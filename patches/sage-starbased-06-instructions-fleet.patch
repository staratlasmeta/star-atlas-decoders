diff --git a/src/instructions/add_ship_to_fleet.rs b/src/instructions/add_ship_to_fleet.rs
index d7909ce..3324504 100644
--- a/src/instructions/add_ship_to_fleet.rs
+++ b/src/instructions/add_ship_to_fleet.rs
@@ -12,11 +12,21 @@ pub struct AddShipToFleet {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct AddShipToFleetInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub funder: solana_pubkey::Pubkey,
     pub fleet_ships: solana_pubkey::Pubkey,
     pub ship: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub system_program: solana_pubkey::Pubkey,
 }
 
@@ -27,19 +37,35 @@ impl carbon_core::deserialize::ArrangeAccounts for AddShipToFleet {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // Direct accounts
         let funder = next_account(&mut iter)?;
         let fleet_ships = next_account(&mut iter)?;
         let ship = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+        // Direct accounts
         let system_program = next_account(&mut iter)?;
 
         Some(AddShipToFleetInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             funder,
             fleet_ships,
             ship,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             system_program,
         })
     }
diff --git a/src/instructions/close_fleet_cargo_pod_token_account.rs b/src/instructions/close_fleet_cargo_pod_token_account.rs
index b395d37..90df8b5 100644
--- a/src/instructions/close_fleet_cargo_pod_token_account.rs
+++ b/src/instructions/close_fleet_cargo_pod_token_account.rs
@@ -12,7 +12,14 @@ pub struct CloseFleetCargoPodTokenAccount {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct CloseFleetCargoPodTokenAccountInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub cargo_pod: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
@@ -30,7 +37,14 @@ impl carbon_core::deserialize::ArrangeAccounts for CloseFleetCargoPodTokenAccoun
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // Direct accounts
         let cargo_pod = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
@@ -41,7 +55,12 @@ impl carbon_core::deserialize::ArrangeAccounts for CloseFleetCargoPodTokenAccoun
         let token_program = next_account(&mut iter)?;
 
         Some(CloseFleetCargoPodTokenAccountInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             cargo_pod,
             cargo_type,
             cargo_stats_definition,
diff --git a/src/instructions/force_disband_fleet.rs b/src/instructions/force_disband_fleet.rs
index 4f063f9..842946a 100644
--- a/src/instructions/force_disband_fleet.rs
+++ b/src/instructions/force_disband_fleet.rs
@@ -12,6 +12,7 @@ pub struct ForceDisbandFleet {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct ForceDisbandFleetInstructionAccounts {
+    // Direct accounts
     pub funder: solana_pubkey::Pubkey,
     pub disbanded_fleet: solana_pubkey::Pubkey,
     pub fleet: solana_pubkey::Pubkey,
@@ -19,9 +20,15 @@ pub struct ForceDisbandFleetInstructionAccounts {
     pub cargo_hold: solana_pubkey::Pubkey,
     pub fuel_tank: solana_pubkey::Pubkey,
     pub ammo_bank: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub ship: solana_pubkey::Pubkey,
-    pub game_accounts: solana_pubkey::Pubkey,
+    // GameAndGameState expansion
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub cargo_program: solana_pubkey::Pubkey,
     pub system_program: solana_pubkey::Pubkey,
 }
@@ -33,6 +40,7 @@ impl carbon_core::deserialize::ArrangeAccounts for ForceDisbandFleet {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
+        // Direct accounts
         let funder = next_account(&mut iter)?;
         let disbanded_fleet = next_account(&mut iter)?;
         let fleet = next_account(&mut iter)?;
@@ -40,9 +48,15 @@ impl carbon_core::deserialize::ArrangeAccounts for ForceDisbandFleet {
         let cargo_hold = next_account(&mut iter)?;
         let fuel_tank = next_account(&mut iter)?;
         let ammo_bank = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+        // Direct accounts
         let ship = next_account(&mut iter)?;
-        let game_accounts = next_account(&mut iter)?;
+        // GameAndGameState expansion
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // Direct accounts
         let cargo_program = next_account(&mut iter)?;
         let system_program = next_account(&mut iter)?;
 
@@ -54,9 +68,11 @@ impl carbon_core::deserialize::ArrangeAccounts for ForceDisbandFleet {
             cargo_hold,
             fuel_tank,
             ammo_bank,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             ship,
-            game_accounts,
+            game_id,
+            game_state,
             cargo_program,
             system_program,
         })
diff --git a/src/instructions/idle_to_loading_bay.rs b/src/instructions/idle_to_loading_bay.rs
index 3cb80ac..d0da373 100644
--- a/src/instructions/idle_to_loading_bay.rs
+++ b/src/instructions/idle_to_loading_bay.rs
@@ -10,8 +10,16 @@ pub struct IdleToLoadingBay {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct IdleToLoadingBayInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
 }
 
 impl carbon_core::deserialize::ArrangeAccounts for IdleToLoadingBay {
@@ -21,12 +29,26 @@ impl carbon_core::deserialize::ArrangeAccounts for IdleToLoadingBay {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
 
         Some(IdleToLoadingBayInstructionAccounts {
-            game_accounts_fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
+            starbase,
+            starbase_player,
         })
     }
 }
diff --git a/src/instructions/idle_to_respawn.rs b/src/instructions/idle_to_respawn.rs
index 69ae6f1..13fa8de 100644
--- a/src/instructions/idle_to_respawn.rs
+++ b/src/instructions/idle_to_respawn.rs
@@ -12,7 +12,14 @@ pub struct IdleToRespawn {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct IdleToRespawnInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub atlas_token_from: solana_pubkey::Pubkey,
     pub atlas_token_to: solana_pubkey::Pubkey,
     pub token_program: solana_pubkey::Pubkey,
@@ -25,13 +32,25 @@ impl carbon_core::deserialize::ArrangeAccounts for IdleToRespawn {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // Direct accounts
         let atlas_token_from = next_account(&mut iter)?;
         let atlas_token_to = next_account(&mut iter)?;
         let token_program = next_account(&mut iter)?;
 
         Some(IdleToRespawnInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             atlas_token_from,
             atlas_token_to,
             token_program,
diff --git a/src/instructions/load_fleet_crew.rs b/src/instructions/load_fleet_crew.rs
index 03e6d7a..af0a0f5 100644
--- a/src/instructions/load_fleet_crew.rs
+++ b/src/instructions/load_fleet_crew.rs
@@ -12,8 +12,15 @@ pub struct LoadFleetCrew {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct LoadFleetCrewInstructionAccounts {
-    pub fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // FleetAndOwner expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub game_id: solana_pubkey::Pubkey,
 }
 
@@ -24,13 +31,24 @@ impl carbon_core::deserialize::ArrangeAccounts for LoadFleetCrew {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // FleetAndOwner expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+        // Direct accounts
         let game_id = next_account(&mut iter)?;
 
         Some(LoadFleetCrewInstructionAccounts {
-            fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            starbase,
+            starbase_player,
             game_id,
         })
     }
diff --git a/src/instructions/loading_bay_to_idle.rs b/src/instructions/loading_bay_to_idle.rs
index e202fbe..8545795 100644
--- a/src/instructions/loading_bay_to_idle.rs
+++ b/src/instructions/loading_bay_to_idle.rs
@@ -10,8 +10,16 @@ pub struct LoadingBayToIdle {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct LoadingBayToIdleInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
 }
 
 impl carbon_core::deserialize::ArrangeAccounts for LoadingBayToIdle {
@@ -21,12 +29,26 @@ impl carbon_core::deserialize::ArrangeAccounts for LoadingBayToIdle {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
 
         Some(LoadingBayToIdleInstructionAccounts {
-            game_accounts_fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
+            starbase,
+            starbase_player,
         })
     }
 }
diff --git a/src/instructions/loading_bay_to_respawn.rs b/src/instructions/loading_bay_to_respawn.rs
index c8452cc..ac251b9 100644
--- a/src/instructions/loading_bay_to_respawn.rs
+++ b/src/instructions/loading_bay_to_respawn.rs
@@ -12,8 +12,17 @@ pub struct LoadingBayToRespawn {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct LoadingBayToRespawnInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub atlas_token_from: solana_pubkey::Pubkey,
     pub atlas_token_to: solana_pubkey::Pubkey,
     pub token_program: solana_pubkey::Pubkey,
@@ -26,15 +35,30 @@ impl carbon_core::deserialize::ArrangeAccounts for LoadingBayToRespawn {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+        // Direct accounts
         let atlas_token_from = next_account(&mut iter)?;
         let atlas_token_to = next_account(&mut iter)?;
         let token_program = next_account(&mut iter)?;
 
         Some(LoadingBayToRespawnInstructionAccounts {
-            game_accounts_fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
+            starbase,
+            starbase_player,
             atlas_token_from,
             atlas_token_to,
             token_program,
diff --git a/src/instructions/mine_asteroid_to_respawn.rs b/src/instructions/mine_asteroid_to_respawn.rs
index d6779d2..045d04e 100644
--- a/src/instructions/mine_asteroid_to_respawn.rs
+++ b/src/instructions/mine_asteroid_to_respawn.rs
@@ -12,7 +12,14 @@ pub struct MineAsteroidToRespawn {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct MineAsteroidToRespawnInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub resource: solana_pubkey::Pubkey,
     pub planet: solana_pubkey::Pubkey,
     pub atlas_token_from: solana_pubkey::Pubkey,
@@ -27,7 +34,14 @@ impl carbon_core::deserialize::ArrangeAccounts for MineAsteroidToRespawn {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // Direct accounts
         let resource = next_account(&mut iter)?;
         let planet = next_account(&mut iter)?;
         let atlas_token_from = next_account(&mut iter)?;
@@ -35,7 +49,12 @@ impl carbon_core::deserialize::ArrangeAccounts for MineAsteroidToRespawn {
         let token_program = next_account(&mut iter)?;
 
         Some(MineAsteroidToRespawnInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             resource,
             planet,
             atlas_token_from,
diff --git a/src/instructions/respawn_to_loading_bay.rs b/src/instructions/respawn_to_loading_bay.rs
index 220f58d..6b68f08 100644
--- a/src/instructions/respawn_to_loading_bay.rs
+++ b/src/instructions/respawn_to_loading_bay.rs
@@ -12,8 +12,17 @@ pub struct RespawnToLoadingBay {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct RespawnToLoadingBayInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub cargo_hold: solana_pubkey::Pubkey,
     pub fuel_tank: solana_pubkey::Pubkey,
     pub ammo_bank: solana_pubkey::Pubkey,
@@ -26,15 +35,30 @@ impl carbon_core::deserialize::ArrangeAccounts for RespawnToLoadingBay {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+        // Direct accounts
         let cargo_hold = next_account(&mut iter)?;
         let fuel_tank = next_account(&mut iter)?;
         let ammo_bank = next_account(&mut iter)?;
 
         Some(RespawnToLoadingBayInstructionAccounts {
-            game_accounts_fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
+            starbase,
+            starbase_player,
             cargo_hold,
             fuel_tank,
             ammo_bank,
diff --git a/src/instructions/unload_fleet_crew.rs b/src/instructions/unload_fleet_crew.rs
index cd346c9..496910d 100644
--- a/src/instructions/unload_fleet_crew.rs
+++ b/src/instructions/unload_fleet_crew.rs
@@ -12,8 +12,15 @@ pub struct UnloadFleetCrew {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct UnloadFleetCrewInstructionAccounts {
-    pub fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // FleetAndOwner expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub game_id: solana_pubkey::Pubkey,
 }
 
@@ -24,13 +31,24 @@ impl carbon_core::deserialize::ArrangeAccounts for UnloadFleetCrew {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+        // FleetAndOwner expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+        // Direct accounts
         let game_id = next_account(&mut iter)?;
 
         Some(UnloadFleetCrewInstructionAccounts {
-            fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            starbase,
+            starbase_player,
             game_id,
         })
     }
diff --git a/src/instructions/update_ship_in_fleet.rs b/src/instructions/update_ship_in_fleet.rs
index d9ee076..c01d66c 100644
--- a/src/instructions/update_ship_in_fleet.rs
+++ b/src/instructions/update_ship_in_fleet.rs
@@ -12,11 +12,14 @@ pub struct UpdateShipInFleet {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct UpdateShipInFleetInstructionAccounts {
+    // Direct accounts
     pub fleet: solana_pubkey::Pubkey,
     pub fleet_ships: solana_pubkey::Pubkey,
     pub old_ship: solana_pubkey::Pubkey,
     pub next: solana_pubkey::Pubkey,
-    pub game_accounts: solana_pubkey::Pubkey,
+    // GameAndGameState expansion
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
 }
 
 impl carbon_core::deserialize::ArrangeAccounts for UpdateShipInFleet {
@@ -26,18 +29,22 @@ impl carbon_core::deserialize::ArrangeAccounts for UpdateShipInFleet {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
+        // Direct accounts
         let fleet = next_account(&mut iter)?;
         let fleet_ships = next_account(&mut iter)?;
         let old_ship = next_account(&mut iter)?;
         let next = next_account(&mut iter)?;
-        let game_accounts = next_account(&mut iter)?;
+        // GameAndGameState expansion
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
 
         Some(UpdateShipInFleetInstructionAccounts {
             fleet,
             fleet_ships,
             old_ship,
             next,
-            game_accounts,
+            game_id,
+            game_state,
         })
     }
 }

diff --git a/src/instructions/start_mining_asteroid.rs b/src/instructions/start_mining_asteroid.rs
index 79fb6e0..71c3ab0 100644
--- a/src/instructions/start_mining_asteroid.rs
+++ b/src/instructions/start_mining_asteroid.rs
@@ -12,9 +12,17 @@ pub struct StartMiningAsteroid {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct StartMiningAsteroidInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub fleet_fuel_token_account: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseMutAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
     pub mine_item: solana_pubkey::Pubkey,
     pub resource: solana_pubkey::Pubkey,
     pub planet: solana_pubkey::Pubkey,
@@ -27,17 +35,35 @@ impl carbon_core::deserialize::ArrangeAccounts for StartMiningAsteroid {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let fleet_fuel_token_account = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseMutAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
         let mine_item = next_account(&mut iter)?;
         let resource = next_account(&mut iter)?;
         let planet = next_account(&mut iter)?;
 
         Some(StartMiningAsteroidInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             fleet_fuel_token_account,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             mine_item,
             resource,
             planet,
diff --git a/src/instructions/stop_mining_asteroid.rs b/src/instructions/stop_mining_asteroid.rs
index bf9250f..898cc42 100644
--- a/src/instructions/stop_mining_asteroid.rs
+++ b/src/instructions/stop_mining_asteroid.rs
@@ -12,7 +12,13 @@ pub struct StopMiningAsteroid {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct StopMiningAsteroidInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub mine_item: solana_pubkey::Pubkey,
     pub resource: solana_pubkey::Pubkey,
     pub planet: solana_pubkey::Pubkey,
@@ -21,9 +27,18 @@ pub struct StopMiningAsteroidInstructionAccounts {
     pub cargo_stats_definition: solana_pubkey::Pubkey,
     pub token_from: solana_pubkey::Pubkey,
     pub token_mint: solana_pubkey::Pubkey,
-    pub pilot_xp_accounts: solana_pubkey::Pubkey,
-    pub mining_xp_accounts: solana_pubkey::Pubkey,
-    pub council_rank_xp_accounts: solana_pubkey::Pubkey,
+    // PointsModificationAccounts expansion (pilot)
+    pub pilot_user_points_account: solana_pubkey::Pubkey,
+    pub pilot_points_category: solana_pubkey::Pubkey,
+    pub pilot_points_modifier_account: solana_pubkey::Pubkey,
+    // PointsModificationAccounts expansion (mining)
+    pub mining_user_points_account: solana_pubkey::Pubkey,
+    pub mining_points_category: solana_pubkey::Pubkey,
+    pub mining_points_modifier_account: solana_pubkey::Pubkey,
+    // PointsModificationAccounts expansion (council_rank)
+    pub council_rank_user_points_account: solana_pubkey::Pubkey,
+    pub council_rank_points_category: solana_pubkey::Pubkey,
+    pub council_rank_points_modifier_account: solana_pubkey::Pubkey,
     pub progression_config: solana_pubkey::Pubkey,
     pub points_program: solana_pubkey::Pubkey,
     pub cargo_program: solana_pubkey::Pubkey,
@@ -37,7 +52,15 @@ impl carbon_core::deserialize::ArrangeAccounts for StopMiningAsteroid {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let mine_item = next_account(&mut iter)?;
         let resource = next_account(&mut iter)?;
         let planet = next_account(&mut iter)?;
@@ -46,16 +69,34 @@ impl carbon_core::deserialize::ArrangeAccounts for StopMiningAsteroid {
         let cargo_stats_definition = next_account(&mut iter)?;
         let token_from = next_account(&mut iter)?;
         let token_mint = next_account(&mut iter)?;
-        let pilot_xp_accounts = next_account(&mut iter)?;
-        let mining_xp_accounts = next_account(&mut iter)?;
-        let council_rank_xp_accounts = next_account(&mut iter)?;
+
+        // PointsModificationAccounts expansion (pilot)
+        let pilot_user_points_account = next_account(&mut iter)?;
+        let pilot_points_category = next_account(&mut iter)?;
+        let pilot_points_modifier_account = next_account(&mut iter)?;
+
+        // PointsModificationAccounts expansion (mining)
+        let mining_user_points_account = next_account(&mut iter)?;
+        let mining_points_category = next_account(&mut iter)?;
+        let mining_points_modifier_account = next_account(&mut iter)?;
+
+        // PointsModificationAccounts expansion (council_rank)
+        let council_rank_user_points_account = next_account(&mut iter)?;
+        let council_rank_points_category = next_account(&mut iter)?;
+        let council_rank_points_modifier_account = next_account(&mut iter)?;
+
         let progression_config = next_account(&mut iter)?;
         let points_program = next_account(&mut iter)?;
         let cargo_program = next_account(&mut iter)?;
         let token_program = next_account(&mut iter)?;
 
         Some(StopMiningAsteroidInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             mine_item,
             resource,
             planet,
@@ -64,9 +105,15 @@ impl carbon_core::deserialize::ArrangeAccounts for StopMiningAsteroid {
             cargo_stats_definition,
             token_from,
             token_mint,
-            pilot_xp_accounts,
-            mining_xp_accounts,
-            council_rank_xp_accounts,
+            pilot_user_points_account,
+            pilot_points_category,
+            pilot_points_modifier_account,
+            mining_user_points_account,
+            mining_points_category,
+            mining_points_modifier_account,
+            council_rank_user_points_account,
+            council_rank_points_category,
+            council_rank_points_modifier_account,
             progression_config,
             points_program,
             cargo_program,

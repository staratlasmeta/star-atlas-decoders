diff --git a/Cargo.toml b/Cargo.toml
index 989e62f..c17a45b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -15,6 +15,7 @@ rust-version = "1.85"
 crate-type = ["rlib"]
 
 [dependencies]
+bitflags = "2.6"
 carbon-core = "0.10.0"
 carbon-proc-macros = "0.10.0"
 carbon-macros = "0.10.0"
diff --git a/src/types/cargo_permissions.rs b/src/types/cargo_permissions.rs
new file mode 100644
index 0000000..0b754e2
--- /dev/null
+++ b/src/types/cargo_permissions.rs
@@ -0,0 +1,36 @@
+use bitflags::bitflags;
+
+bitflags! {
+    /// Permissions for the cargo program.
+    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
+    pub struct CargoPermissions: u64 {
+        /// Key can init and update cargo definitions.
+        const MANAGE_DEFINITION = 1 << 0;
+        /// Key can create cargo types.
+        const CREATE_CARGO_TYPE = 1 << 1;
+        /// Key can update cargo types.
+        const MANAGE_CARGO_TYPE = 1 << 2;
+    }
+}
+
+impl CargoPermissions {
+    /// Create CargoPermissions from a u64 value, truncating any unknown bits.
+    pub fn from_u64(bits: u64) -> Self {
+        Self::from_bits_truncate(bits)
+    }
+
+    /// Convert CargoPermissions to a u64 value.
+    pub fn to_u64(self) -> u64 {
+        self.bits()
+    }
+
+    /// Create CargoPermissions from little-endian bytes.
+    pub fn from_le_bytes(bytes: [u8; 8]) -> Self {
+        Self::from_u64(u64::from_le_bytes(bytes))
+    }
+
+    /// Convert CargoPermissions to little-endian bytes.
+    pub fn to_le_bytes(self) -> [u8; 8] {
+        self.to_u64().to_le_bytes()
+    }
+}
diff --git a/src/types/mod.rs b/src/types/mod.rs
index 0875a02..7b5304c 100644
--- a/src/types/mod.rs
+++ b/src/types/mod.rs
@@ -1,3 +1,5 @@
+pub mod cargo_permissions;
+pub use cargo_permissions::*;
 pub mod init_cargo_type_from_old_cargo_type_input;
 pub use init_cargo_type_from_old_cargo_type_input::*;
 pub mod init_cargo_type_input;

diff --git a/src/instructions/deposit_cargo_to_fleet.rs b/src/instructions/deposit_cargo_to_fleet.rs
index 1fc6d43..1d94089 100644
--- a/src/instructions/deposit_cargo_to_fleet.rs
+++ b/src/instructions/deposit_cargo_to_fleet.rs
@@ -12,9 +12,19 @@ pub struct DepositCargoToFleet {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct DepositCargoToFleetInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub funds_to: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub cargo_pod_from: solana_pubkey::Pubkey,
     pub cargo_pod_to: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
@@ -33,9 +43,23 @@ impl carbon_core::deserialize::ArrangeAccounts for DepositCargoToFleet {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
+        // Direct accounts
         let funds_to = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
+        // Direct accounts
         let cargo_pod_from = next_account(&mut iter)?;
         let cargo_pod_to = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
@@ -47,9 +71,15 @@ impl carbon_core::deserialize::ArrangeAccounts for DepositCargoToFleet {
         let token_program = next_account(&mut iter)?;
 
         Some(DepositCargoToFleetInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             funds_to,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             cargo_pod_from,
             cargo_pod_to,
             cargo_type,
diff --git a/src/instructions/set_next_ship.rs b/src/instructions/set_next_ship.rs
index 85278fc..28ec0ed 100644
--- a/src/instructions/set_next_ship.rs
+++ b/src/instructions/set_next_ship.rs
@@ -10,7 +10,11 @@ pub struct SetNextShip {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct SetNextShipInstructionAccounts {
-    pub game_and_profile: solana_pubkey::Pubkey,
+    // ActiveOrInactiveGameAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    // Direct accounts
     pub ship: solana_pubkey::Pubkey,
     pub next_ship: solana_pubkey::Pubkey,
 }
@@ -22,12 +26,20 @@ impl carbon_core::deserialize::ArrangeAccounts for SetNextShip {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_and_profile = next_account(&mut iter)?;
+
+        // ActiveOrInactiveGameAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+
+        // Direct accounts
         let ship = next_account(&mut iter)?;
         let next_ship = next_account(&mut iter)?;
 
         Some(SetNextShipInstructionAccounts {
-            game_and_profile,
+            key,
+            profile,
+            game_id,
             ship,
             next_ship,
         })
diff --git a/src/instructions/transfer_cargo_within_fleet.rs b/src/instructions/transfer_cargo_within_fleet.rs
index 607a048..911d68c 100644
--- a/src/instructions/transfer_cargo_within_fleet.rs
+++ b/src/instructions/transfer_cargo_within_fleet.rs
@@ -12,7 +12,14 @@ pub struct TransferCargoWithinFleet {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct TransferCargoWithinFleetInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // Direct accounts
     pub cargo_pod_from: solana_pubkey::Pubkey,
     pub cargo_pod_to: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
@@ -32,7 +39,16 @@ impl carbon_core::deserialize::ArrangeAccounts for TransferCargoWithinFleet {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
+
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
+        // Direct accounts
         let cargo_pod_from = next_account(&mut iter)?;
         let cargo_pod_to = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
@@ -45,7 +61,12 @@ impl carbon_core::deserialize::ArrangeAccounts for TransferCargoWithinFleet {
         let token_program = next_account(&mut iter)?;
 
         Some(TransferCargoWithinFleetInstructionAccounts {
-            game_accounts_fleet_and_owner,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
             cargo_pod_from,
             cargo_pod_to,
             cargo_type,
diff --git a/src/instructions/withdraw_cargo_from_fleet.rs b/src/instructions/withdraw_cargo_from_fleet.rs
index c21a5d6..d626eed 100644
--- a/src/instructions/withdraw_cargo_from_fleet.rs
+++ b/src/instructions/withdraw_cargo_from_fleet.rs
@@ -12,8 +12,17 @@ pub struct WithdrawCargoFromFleet {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct WithdrawCargoFromFleetInstructionAccounts {
-    pub game_accounts_fleet_and_owner: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndFleetAndOwnerMut expansion
+    pub key: solana_pubkey::Pubkey,
+    pub owning_profile: solana_pubkey::Pubkey,
+    pub owning_profile_faction: solana_pubkey::Pubkey,
+    pub fleet: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // Direct accounts
     pub cargo_pod_from: solana_pubkey::Pubkey,
     pub cargo_pod_to: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
@@ -33,8 +42,20 @@ impl carbon_core::deserialize::ArrangeAccounts for WithdrawCargoFromFleet {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let game_accounts_fleet_and_owner = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // GameAndGameStateAndFleetAndOwnerMut expansion
+        let key = next_account(&mut iter)?;
+        let owning_profile = next_account(&mut iter)?;
+        let owning_profile_faction = next_account(&mut iter)?;
+        let fleet = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
+        // Direct accounts
         let cargo_pod_from = next_account(&mut iter)?;
         let cargo_pod_to = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
@@ -47,8 +68,14 @@ impl carbon_core::deserialize::ArrangeAccounts for WithdrawCargoFromFleet {
         let token_program = next_account(&mut iter)?;
 
         Some(WithdrawCargoFromFleetInstructionAccounts {
-            game_accounts_fleet_and_owner,
-            starbase_and_starbase_player,
+            key,
+            owning_profile,
+            owning_profile_faction,
+            fleet,
+            game_id,
+            game_state,
+            starbase,
+            starbase_player,
             cargo_pod_from,
             cargo_pod_to,
             cargo_type,

diff --git a/Cargo.toml b/Cargo.toml
index e8baa59..84d392e 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -15,6 +15,7 @@ rust-version = "1.85"
 crate-type = ["rlib"]
 
 [dependencies]
+bitflags = "2.6"
 carbon-core = "0.10.0"
 carbon-proc-macros = "0.10.0"
 carbon-macros = "0.10.0"
diff --git a/src/types/add_key_input.rs b/src/types/add_key_input.rs
index 4fdb78e..4583d9d 100644
--- a/src/types/add_key_input.rs
+++ b/src/types/add_key_input.rs
@@ -1,5 +1,7 @@
 use carbon_core::{CarbonDeserialize, borsh};
 
+use super::ProfilePermissions;
+
 #[derive(
     CarbonDeserialize, Debug, serde::Serialize, serde::Deserialize, PartialEq, Eq, Clone, Hash,
 )]
@@ -8,3 +10,25 @@ pub struct AddKeyInput {
     pub expire_time: i64,
     pub permissions: [u8; 8],
 }
+
+impl AddKeyInput {
+    /// Convert the raw permission bytes to a u64 value.
+    pub fn permissions_as_u64(&self) -> u64 {
+        u64::from_le_bytes(self.permissions)
+    }
+
+    /// Get the permissions as a ProfilePermissions bitflags type.
+    pub fn permissions_flags(&self) -> ProfilePermissions {
+        ProfilePermissions::from_le_bytes(self.permissions)
+    }
+
+    /// Check if this input has a specific permission flag set.
+    pub fn has_permission(&self, flag: ProfilePermissions) -> bool {
+        self.permissions_flags().contains(flag)
+    }
+
+    /// Check if this input grants auth permission.
+    pub fn is_auth(&self) -> bool {
+        self.has_permission(ProfilePermissions::AUTH)
+    }
+}
diff --git a/src/types/mod.rs b/src/types/mod.rs
index 1b86eb3..6a2fbce 100644
--- a/src/types/mod.rs
+++ b/src/types/mod.rs
@@ -4,5 +4,7 @@ pub mod member_status;
 pub use member_status::*;
 pub mod profile_key;
 pub use profile_key::*;
+pub mod profile_permissions;
+pub use profile_permissions::*;
 pub mod role_membership;
 pub use role_membership::*;
diff --git a/src/types/profile_key.rs b/src/types/profile_key.rs
index a3c2dca..5ab46ba 100644
--- a/src/types/profile_key.rs
+++ b/src/types/profile_key.rs
@@ -1,5 +1,7 @@
 use carbon_core::{CarbonDeserialize, borsh};
 
+use super::ProfilePermissions;
+
 #[derive(
     CarbonDeserialize, Debug, serde::Serialize, serde::Deserialize, PartialEq, Eq, Clone, Hash,
 )]
@@ -9,3 +11,31 @@ pub struct ProfileKey {
     pub expire_time: i64,
     pub permissions: [u8; 8],
 }
+
+impl ProfileKey {
+    /// Convert the raw permission bytes to a u64 value.
+    pub fn permissions_as_u64(&self) -> u64 {
+        u64::from_le_bytes(self.permissions)
+    }
+
+    /// Get the permissions as a ProfilePermissions bitflags type.
+    pub fn permissions_flags(&self) -> ProfilePermissions {
+        ProfilePermissions::from_le_bytes(self.permissions)
+    }
+
+    /// Check if this key has a specific permission flag set.
+    pub fn has_permission(&self, flag: ProfilePermissions) -> bool {
+        self.permissions_flags().contains(flag)
+    }
+
+    /// Check if this key is an auth key (has AUTH permission).
+    pub fn is_auth(&self) -> bool {
+        self.has_permission(ProfilePermissions::AUTH)
+    }
+
+    /// Check if this key has expired based on the given current time.
+    /// Keys with negative expire_time never expire.
+    pub fn is_expired(&self, current_time: i64) -> bool {
+        self.expire_time >= 0 && self.expire_time < current_time
+    }
+}
diff --git a/src/types/profile_permissions.rs b/src/types/profile_permissions.rs
new file mode 100644
index 0000000..9832450
--- /dev/null
+++ b/src/types/profile_permissions.rs
@@ -0,0 +1,60 @@
+use bitflags::bitflags;
+
+bitflags! {
+    /// Permissions for the player profile program.
+    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
+    pub struct ProfilePermissions: u64 {
+        /// Key is an auth key and can update the profile.
+        /// Key can also edit any permissions on it's own other than AUTH.
+        /// To edit AUTH permissions must meet the threshold.
+        /// Key must not expire.
+        const AUTH = 1 << 0;
+        /// Key can add non-auth keys.
+        /// May only add permissions that the key already has.
+        const ADD_KEYS = 1 << 1;
+        /// Key can remove non-auth keys.
+        const REMOVE_KEYS = 1 << 2;
+        /// Key can change the profile's player name.
+        const CHANGE_NAME = 1 << 3;
+        /// Key can create a new role on the profile.
+        const CREATE_ROLE = 1 << 4;
+        /// Key can remove a role from the profile.
+        const REMOVE_ROLE = 1 << 5;
+        /// Key can set a role's authorizer.
+        const SET_AUTHORIZER = 1 << 6;
+        /// Key can add profile to a role.
+        const JOIN_ROLE = 1 << 7;
+        /// Key can remove profile from a role.
+        const LEAVE_ROLE = 1 << 8;
+        /// Key can toggle accepting new members.
+        const TOGGLE_ACCEPTING_NEW_MEMBERS = 1 << 9;
+        /// Key can add a member to a role.
+        const ADD_MEMBER = 1 << 10;
+        /// Key can remove a member from a role.
+        const REMOVE_MEMBER = 1 << 11;
+        /// Key can withdraw from the SOL Vault. This permission is intended to work for any scope.
+        const DRAIN_SOL_VAULT = 1 << 63;
+    }
+}
+
+impl ProfilePermissions {
+    /// Create ProfilePermissions from a u64 value, truncating any unknown bits.
+    pub fn from_u64(bits: u64) -> Self {
+        Self::from_bits_truncate(bits)
+    }
+
+    /// Convert ProfilePermissions to a u64 value.
+    pub fn to_u64(self) -> u64 {
+        self.bits()
+    }
+
+    /// Create ProfilePermissions from little-endian bytes.
+    pub fn from_le_bytes(bytes: [u8; 8]) -> Self {
+        Self::from_u64(u64::from_le_bytes(bytes))
+    }
+
+    /// Convert ProfilePermissions to little-endian bytes.
+    pub fn to_le_bytes(self) -> [u8; 8] {
+        self.to_u64().to_le_bytes()
+    }
+}

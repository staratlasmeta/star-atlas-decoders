diff --git a/src/instructions/close_starbase_cargo_token_account.rs b/src/instructions/close_starbase_cargo_token_account.rs
index 0158612..4423200 100644
--- a/src/instructions/close_starbase_cargo_token_account.rs
+++ b/src/instructions/close_starbase_cargo_token_account.rs
@@ -13,8 +13,15 @@ pub struct CloseStarbaseCargoTokenAccount {
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct CloseStarbaseCargoTokenAccountInstructionAccounts {
     pub funds_to: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
-    pub game_accounts_and_profile: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub cargo_pod: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
@@ -32,8 +39,18 @@ impl carbon_core::deserialize::ArrangeAccounts for CloseStarbaseCargoTokenAccoun
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
         let funds_to = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
-        let game_accounts_and_profile = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
+        // GameAndGameStateAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let cargo_pod = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
@@ -44,8 +61,13 @@ impl carbon_core::deserialize::ArrangeAccounts for CloseStarbaseCargoTokenAccoun
 
         Some(CloseStarbaseCargoTokenAccountInstructionAccounts {
             funds_to,
-            starbase_and_starbase_player,
-            game_accounts_and_profile,
+            starbase,
+            starbase_player,
+            key,
+            profile,
+            profile_faction,
+            game_id,
+            game_state,
             cargo_pod,
             cargo_type,
             cargo_stats_definition,
diff --git a/src/instructions/create_cargo_pod.rs b/src/instructions/create_cargo_pod.rs
index a8d1961..de27fc6 100644
--- a/src/instructions/create_cargo_pod.rs
+++ b/src/instructions/create_cargo_pod.rs
@@ -13,10 +13,17 @@ pub struct CreateCargoPod {
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct CreateCargoPodInstructionAccounts {
     pub funder: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
     pub cargo_pod: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
-    pub game_accounts_and_profile: solana_pubkey::Pubkey,
+    // GameAndGameStateAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub cargo_program: solana_pubkey::Pubkey,
     pub system_program: solana_pubkey::Pubkey,
 }
@@ -29,19 +36,35 @@ impl carbon_core::deserialize::ArrangeAccounts for CreateCargoPod {
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
         let funder = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
         let cargo_pod = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
-        let game_accounts_and_profile = next_account(&mut iter)?;
+
+        // GameAndGameStateAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let cargo_program = next_account(&mut iter)?;
         let system_program = next_account(&mut iter)?;
 
         Some(CreateCargoPodInstructionAccounts {
             funder,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             cargo_pod,
             cargo_stats_definition,
-            game_accounts_and_profile,
+            key,
+            profile,
+            profile_faction,
+            game_id,
+            game_state,
             cargo_program,
             system_program,
         })
diff --git a/src/instructions/deposit_cargo_to_game.rs b/src/instructions/deposit_cargo_to_game.rs
index 9c464d3..fdd829b 100644
--- a/src/instructions/deposit_cargo_to_game.rs
+++ b/src/instructions/deposit_cargo_to_game.rs
@@ -12,11 +12,18 @@ pub struct DepositCargoToGame {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct DepositCargoToGameInstructionAccounts {
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
     pub cargo_pod: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
-    pub game_accounts_and_profile: solana_pubkey::Pubkey,
+    // GameAndGameStateAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub token_from: solana_pubkey::Pubkey,
     pub token_to: solana_pubkey::Pubkey,
     pub cargo_program: solana_pubkey::Pubkey,
@@ -30,22 +37,38 @@ impl carbon_core::deserialize::ArrangeAccounts for DepositCargoToGame {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
         let cargo_pod = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
-        let game_accounts_and_profile = next_account(&mut iter)?;
+
+        // GameAndGameStateAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let token_from = next_account(&mut iter)?;
         let token_to = next_account(&mut iter)?;
         let cargo_program = next_account(&mut iter)?;
         let token_program = next_account(&mut iter)?;
 
         Some(DepositCargoToGameInstructionAccounts {
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             cargo_pod,
             cargo_type,
             cargo_stats_definition,
-            game_accounts_and_profile,
+            key,
+            profile,
+            profile_faction,
+            game_id,
+            game_state,
             token_from,
             token_to,
             cargo_program,
diff --git a/src/instructions/dev_deposit_cargo_to_game.rs b/src/instructions/dev_deposit_cargo_to_game.rs
index d20230b..2c85d0a 100644
--- a/src/instructions/dev_deposit_cargo_to_game.rs
+++ b/src/instructions/dev_deposit_cargo_to_game.rs
@@ -12,11 +12,17 @@ pub struct DevDepositCargoToGame {
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct DevDepositCargoToGameInstructionAccounts {
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
     pub cargo_pod: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
-    pub game_and_profile: solana_pubkey::Pubkey,
+    // GameAndProfileAndFaction expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
     pub token_from: solana_pubkey::Pubkey,
     pub token_to: solana_pubkey::Pubkey,
     pub cargo_program: solana_pubkey::Pubkey,
@@ -30,22 +36,36 @@ impl carbon_core::deserialize::ArrangeAccounts for DevDepositCargoToGame {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
         let cargo_pod = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
-        let game_and_profile = next_account(&mut iter)?;
+
+        // GameAndProfileAndFaction expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+
         let token_from = next_account(&mut iter)?;
         let token_to = next_account(&mut iter)?;
         let cargo_program = next_account(&mut iter)?;
         let token_program = next_account(&mut iter)?;
 
         Some(DevDepositCargoToGameInstructionAccounts {
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             cargo_pod,
             cargo_type,
             cargo_stats_definition,
-            game_and_profile,
+            key,
+            profile,
+            profile_faction,
+            game_id,
             token_from,
             token_to,
             cargo_program,
diff --git a/src/instructions/register_starbase_player.rs b/src/instructions/register_starbase_player.rs
index 386a71f..e792c7f 100644
--- a/src/instructions/register_starbase_player.rs
+++ b/src/instructions/register_starbase_player.rs
@@ -9,7 +9,9 @@ pub struct RegisterStarbasePlayer {}
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct RegisterStarbasePlayerInstructionAccounts {
     pub funder: solana_pubkey::Pubkey,
-    pub game_accounts: solana_pubkey::Pubkey,
+    // GameAndGameState expansion
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub sage_player_profile: solana_pubkey::Pubkey,
     pub profile_faction: solana_pubkey::Pubkey,
     pub starbase: solana_pubkey::Pubkey,
@@ -25,7 +27,11 @@ impl carbon_core::deserialize::ArrangeAccounts for RegisterStarbasePlayer {
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
         let funder = next_account(&mut iter)?;
-        let game_accounts = next_account(&mut iter)?;
+
+        // GameAndGameState expansion
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let sage_player_profile = next_account(&mut iter)?;
         let profile_faction = next_account(&mut iter)?;
         let starbase = next_account(&mut iter)?;
@@ -34,7 +40,8 @@ impl carbon_core::deserialize::ArrangeAccounts for RegisterStarbasePlayer {
 
         Some(RegisterStarbasePlayerInstructionAccounts {
             funder,
-            game_accounts,
+            game_id,
+            game_state,
             sage_player_profile,
             profile_faction,
             starbase,
diff --git a/src/instructions/remove_cargo_pod.rs b/src/instructions/remove_cargo_pod.rs
index 501d762..e86aecd 100644
--- a/src/instructions/remove_cargo_pod.rs
+++ b/src/instructions/remove_cargo_pod.rs
@@ -13,9 +13,16 @@ pub struct RemoveCargoPod {
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct RemoveCargoPodInstructionAccounts {
     pub funds_to: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
     pub cargo_pod: solana_pubkey::Pubkey,
-    pub game_accounts_and_profile: solana_pubkey::Pubkey,
+    // GameAndGameStateAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub cargo_program: solana_pubkey::Pubkey,
     pub system_program: solana_pubkey::Pubkey,
 }
@@ -28,17 +35,33 @@ impl carbon_core::deserialize::ArrangeAccounts for RemoveCargoPod {
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
         let funds_to = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
         let cargo_pod = next_account(&mut iter)?;
-        let game_accounts_and_profile = next_account(&mut iter)?;
+
+        // GameAndGameStateAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let cargo_program = next_account(&mut iter)?;
         let system_program = next_account(&mut iter)?;
 
         Some(RemoveCargoPodInstructionAccounts {
             funds_to,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             cargo_pod,
-            game_accounts_and_profile,
+            key,
+            profile,
+            profile_faction,
+            game_id,
+            game_state,
             cargo_program,
             system_program,
         })
diff --git a/src/instructions/sync_starbase_player.rs b/src/instructions/sync_starbase_player.rs
index 03e0532..8d8c1ed 100644
--- a/src/instructions/sync_starbase_player.rs
+++ b/src/instructions/sync_starbase_player.rs
@@ -8,8 +8,12 @@ pub struct SyncStarbasePlayer {}
 
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct SyncStarbasePlayerInstructionAccounts {
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
-    pub game_accounts: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayerMut expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameState expansion
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
 }
 
 impl carbon_core::deserialize::ArrangeAccounts for SyncStarbasePlayer {
@@ -19,12 +23,20 @@ impl carbon_core::deserialize::ArrangeAccounts for SyncStarbasePlayer {
         accounts: &[solana_instruction::AccountMeta],
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
-        let starbase_and_starbase_player = next_account(&mut iter)?;
-        let game_accounts = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayerMut expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
+        // GameAndGameState expansion
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
 
         Some(SyncStarbasePlayerInstructionAccounts {
-            starbase_and_starbase_player,
-            game_accounts,
+            starbase,
+            starbase_player,
+            game_id,
+            game_state,
         })
     }
 }
diff --git a/src/instructions/transfer_cargo_at_starbase.rs b/src/instructions/transfer_cargo_at_starbase.rs
index 3e4c111..8b0351a 100644
--- a/src/instructions/transfer_cargo_at_starbase.rs
+++ b/src/instructions/transfer_cargo_at_starbase.rs
@@ -13,12 +13,19 @@ pub struct TransferCargoAtStarbase {
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct TransferCargoAtStarbaseInstructionAccounts {
     pub funds_to: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
     pub cargo_pod_from: solana_pubkey::Pubkey,
     pub cargo_pod_to: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
-    pub game_accounts_and_profile: solana_pubkey::Pubkey,
+    // GameAndGameStateAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub token_from: solana_pubkey::Pubkey,
     pub token_to: solana_pubkey::Pubkey,
     pub token_mint: solana_pubkey::Pubkey,
@@ -34,12 +41,23 @@ impl carbon_core::deserialize::ArrangeAccounts for TransferCargoAtStarbase {
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
         let funds_to = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
         let cargo_pod_from = next_account(&mut iter)?;
         let cargo_pod_to = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
-        let game_accounts_and_profile = next_account(&mut iter)?;
+
+        // GameAndGameStateAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let token_from = next_account(&mut iter)?;
         let token_to = next_account(&mut iter)?;
         let token_mint = next_account(&mut iter)?;
@@ -48,12 +66,17 @@ impl carbon_core::deserialize::ArrangeAccounts for TransferCargoAtStarbase {
 
         Some(TransferCargoAtStarbaseInstructionAccounts {
             funds_to,
-            starbase_and_starbase_player,
+            starbase,
+            starbase_player,
             cargo_pod_from,
             cargo_pod_to,
             cargo_type,
             cargo_stats_definition,
-            game_accounts_and_profile,
+            key,
+            profile,
+            profile_faction,
+            game_id,
+            game_state,
             token_from,
             token_to,
             token_mint,
diff --git a/src/instructions/withdraw_cargo_from_game.rs b/src/instructions/withdraw_cargo_from_game.rs
index 128bd98..298558f 100644
--- a/src/instructions/withdraw_cargo_from_game.rs
+++ b/src/instructions/withdraw_cargo_from_game.rs
@@ -13,8 +13,15 @@ pub struct WithdrawCargoFromGame {
 #[derive(Debug, PartialEq, Eq, Clone, Hash, serde::Serialize, serde::Deserialize)]
 pub struct WithdrawCargoFromGameInstructionAccounts {
     pub funds_to: solana_pubkey::Pubkey,
-    pub starbase_and_starbase_player: solana_pubkey::Pubkey,
-    pub game_accounts_and_profile: solana_pubkey::Pubkey,
+    // StarbaseAndStarbasePlayer expansion
+    pub starbase: solana_pubkey::Pubkey,
+    pub starbase_player: solana_pubkey::Pubkey,
+    // GameAndGameStateAndProfile expansion
+    pub key: solana_pubkey::Pubkey,
+    pub profile: solana_pubkey::Pubkey,
+    pub profile_faction: solana_pubkey::Pubkey,
+    pub game_id: solana_pubkey::Pubkey,
+    pub game_state: solana_pubkey::Pubkey,
     pub cargo_pod: solana_pubkey::Pubkey,
     pub cargo_type: solana_pubkey::Pubkey,
     pub cargo_stats_definition: solana_pubkey::Pubkey,
@@ -33,8 +40,18 @@ impl carbon_core::deserialize::ArrangeAccounts for WithdrawCargoFromGame {
     ) -> Option<Self::ArrangedAccounts> {
         let mut iter = accounts.iter();
         let funds_to = next_account(&mut iter)?;
-        let starbase_and_starbase_player = next_account(&mut iter)?;
-        let game_accounts_and_profile = next_account(&mut iter)?;
+
+        // StarbaseAndStarbasePlayer expansion
+        let starbase = next_account(&mut iter)?;
+        let starbase_player = next_account(&mut iter)?;
+
+        // GameAndGameStateAndProfile expansion
+        let key = next_account(&mut iter)?;
+        let profile = next_account(&mut iter)?;
+        let profile_faction = next_account(&mut iter)?;
+        let game_id = next_account(&mut iter)?;
+        let game_state = next_account(&mut iter)?;
+
         let cargo_pod = next_account(&mut iter)?;
         let cargo_type = next_account(&mut iter)?;
         let cargo_stats_definition = next_account(&mut iter)?;
@@ -46,8 +63,13 @@ impl carbon_core::deserialize::ArrangeAccounts for WithdrawCargoFromGame {
 
         Some(WithdrawCargoFromGameInstructionAccounts {
             funds_to,
-            starbase_and_starbase_player,
-            game_accounts_and_profile,
+            starbase,
+            starbase_player,
+            key,
+            profile,
+            profile_faction,
+            game_id,
+            game_state,
             cargo_pod,
             cargo_type,
             cargo_stats_definition,
